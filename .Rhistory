xyplot(weight ~ Time | Diet, BodyWeight)
library(ggplot2)
inslauu.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
plot(g)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
?axis()
?lpoints()
ppois(10, lambda = 5 * 3)
?t.test
?qt
q7(.95, 8)
qt(.95, 8)
1100+qt(.95, 8)*30/9
1100-qt(.95, 8)*30/9
1100-qt(.95, 9)*30/9
1100-qt(.95, 7)*30/9
1100-qt(.95, 8)*30/3
1100+qt(.95, 8)*30/3
qt(.95, 5)
2*sqrt(6)/2.015
t.test(-2)
qt(.95, 9)
-2 + qt(.95, 9)*.6/sqrt(10)
-2 - qt(.95, 9)*.6/sqrt(10)
-2 - qt(.95, 9)*.68/sqrt(10)
-2 + qt(.95, 9)*.68/sqrt(10)
-4.5 + qt(.90, 8)*.68/3
-4.5 - qt(.90, 8)*.68/3
1000 - qt(.95, 8, lower.tail=F)*30/3
1100 - qt(.95, 8, lower.tail=F)*30/3
1100 - 2.306*30/3
1100 + 2.306*30/3
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
package_version(dplyr)
package_version("dplyr")
package_version()
library(dplyr)
package_version(dplyr)
?package_version
packageVersion(dplyr)
packageVersion("dplyr")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
cran <- tbl_df(mydf)
?
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(df)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(x:size))
select(cran, -time)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,| r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran,| r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
swirl()
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(carn, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran2 <- select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size)
)
library(dplyr)
cran -> tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(package)
by_package <- group_by(cran, package)
by_package
summerize(by_package)
by_package
summerize(by_package, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tider)
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, column sex_class, count)
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count)
res <- gather(students2, key=sex_class, value=count)
dstudents2
students2
res <- gather(students2, sex_class, count. -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students3
?gather
submit
submit()
submit()
submit()
?spread
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1/9/2012")
ymd("1920/1/2")
dt1
ymd_hms("2014-08-23 17:23:02")
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = hour(now()), minutes = minute(now()), seconds = 55)
this_moment
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(this_moment, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive = depart + hour(15) + minute(50)
arrive = depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(arrival, last_time)
how_long <- new_interval(arrive, last_time)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
x <- c(140, 138, 150,148, 135)
x <- c(140, 138, 150,148, 135)
y <- c(132, 135, 151, 146, 130)
t,test(x, y)
t.test(x, y)
?t.test
t.test(x, y, paired = true)
t.test(x, y, paired = TRUE)
?tquantile
?t.quantile
?qt
1100 + c(-1, 1) * qt(.975, 8) * 30/3
?pbinom
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
1/100
PPOIS(10 - 1, .01 *1787, lower.tail = FALSE)
ppois(10 - 1, .01 *1787, lower.tail = FALSE)
ppois(10, .01 *1787, lower.tail = FALSE)
ppois(10, .01 *1787)
ppois(10 - 1, .01 *1787)
se = 1.5/3 + 1.8/3
-4/se
4/se
pnorm(4/se)
pnorm(4/se)*2
qt(4/se, 8)
?qt
pnorm(.01+1.645*.004, lower.tail=FALSE)
pnorm(.01+1.645*.004, mean = 0, lower.tail=FALSE)
z = qnorm(1 - 0.5)
z
z = qnorm(1 - 0.05)
z
pnorm(.01 + z * .04/sqrt(100), mean = 0, sd = .04/sqrt(100), lower.tail = FALSE)
pnorm(.01 + z * .04/sqrt(100), mean = 0, lower.tail = FALSE)
pnorm(.01 + z * .04/sqrt(160), mean = 0, lower.tail = FALSE)
pnorm(.01 + z * .04/sqrt(180), mean = 0, lower.tail = FALSE)
pnorm(.01 + z * .04/sqrt(100), mean = 0, sd = .04, lower.tail = FALSE)
pnorm(.01 + z * .04/sqrt(180), mean = 0, sd = .04, lower.tail = FALSE)
pnorm(.01 + z * .04/sqrt(180), mean = 0, sd = .04, lower.tail = FALSE)
pnorm(.01 + z * .04/sqrt(180), lower.tail = FALSE)
pnorm(.01 + z * .04/sqrt(18), lower.tail = FALSE)
pnorm(.01 + z * .04/sqrt(100), mean = 0, sd = .04, lower.tail = FALSE)
z
pnorm(-.01 + z * .04/sqrt(100), mean = 0, sd = .04, lower.tail = FALSE)
pnorm(z * .04/sqrt(100), mean = 0.1, sd = .04, lower.tail = FALSE)
z
pnorm(z * .04/sqrt(100), mean = 0.01, sd = .04, lower.tail = FALSE)
pnorm(z * .04/sqrt(180), mean = 0.01, sd = .04, lower.tail = FALSE)
pnorm(z * .04/sqrt(100), mean = 0.01, sd = .04, lower.tail = FALSE)
pnorm(.01 * z * .04/sqrt(100), mean = 0.01, sd = .04, lower.tail = FALSE)
pnorm(.01 * z * .04/sqrt(180), mean = 0.01, sd = .04, lower.tail = FALSE)
pnorm(.01 * z * .04/sqrt(10000), mean = 0.01, sd = .04, lower.tail = FALSE)
pnorm(.01 * z * .04/sqrt(10000), mean = 0.01, sd = .04/sqrt(100), lower.tail = FALSE)
pnorm(.01 * z * .04/sqrt(100), mean = 0.01, sd = .04/sqrt(100), lower.tail = FALSE)
pnorm(z * .04/sqrt(100), mean = 0.01, sd = .04/sqrt(100), lower.tail = FALSE)
pnorm(z * .04/sqrt(180), mean = 0.01, sd = .04/sqrt(180), lower.tail = FALSE)
pnorm(z * .04/sqrt(160), mean = 0.01, sd = .04/sqrt(160), lower.tail = FALSE)
pnorm(z * .04/sqrt(140), mean = 0.01, sd = .04/sqrt(140), lower.tail = FALSE)
pnorm(z * .04/sqrt(120), mean = 0.01, sd = .04/sqrt(120), lower.tail = FALSE)
se <- sqrt((1.5^2*8+1.8^2*8)/16 * (1/9 +1/9))
z <- (-3+1) / se
pvalue <- pnorm(z) * 2
pvalue
(1.5^2*8+1.8^2*8)/16
?pnorm
?qt
se <- sqrt((1.5^2*8+1.8^2*8)/16 * (1/9 +1/9))
z <- (-3+1) / se
z
se <- sqrt((1.5^2*8+1.8^2*8)/16 * (1/9 +1/9))
z <- (-3+1) / se
pvalue <- pnorm(z) * 2
pvalue
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
1
52
4/52
0
12/52
1/11
2/51
.8
.5
1.6*.8*.5
.64/2
.64
mypdf
integrate(mypdf, 0, 1.6)
X^2/8
x^2/8
2
sqrt(2)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
.997*.001
.985*(1-.001)
.(1 - 985)*(1-.001)
.(1 - .985) * (1 -.001)
(1 - .985) * (1 -.001)
(.997*.001) / ((.997*.001 ) + ((1 - 985)*(1-.001)))
(.997*.001) / ((.997*.001 ) + (.015 *  .999))
3.5
expext_dice
expext_dice()
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsum
allsam
apply(allsam, 1, mean)
mean(smeans)
dice_sqr
sum(dice_sqr * dice_fair)
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5
ex2_fair - 3.5^2
sum(dice_sqr * dice_fair) -edh^2
sum(dice_sqr * dice_high) -edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/aqrt(10)
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
?shuttle
glm(use ~ sign(wind), data = shuttle)
library(mass)
library(MASS)
glm(use ~ sign(wind), data = shuttle)
head(shuttel)
head(shuttle)
glm(use ~ wind, data = shuttle)
?glm
glm(use ~ wind, data = shuttle, family = "logit")
glm(use ~ wind, data = shuttle, family = "binomial")
useAuto <- glm(use ~ wind, data = shuttle, family = "binomial")
exp(useAuto$coeff)
str(shuttle)
exp(useAuto$coeff[2])
1/exp(useAuto$coeff[2])
exp(useAuto$coeff)/(2*exp(useAuto$coeff))
temp <- exp(useAuto$coeff[1])*exp(useAuto$coeff[2])
temp/2*temp
temp/(2*temp)
useAuto <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
useAuto
exp(useAuto$coeff[1])/exp(useAuto$coeff[2])
useAuto <- glm(use ~ factor(wind) - 1, data = shuttle, family = "binomial")
useAuto
shuttle2$use2<-as.numeric(shuttle2$use=='auto')
shuttle2<-shuttle
shuttle2$use2<-as.numeric(shuttle2$use=='auto')
#shuttle2$wind2<-as.numeric(shuttle2$wind=='head')
#head(shuttle2)
fit<-glm(use2 ~ factor(wind) - 1, family = binomial, data = shuttle2)
fit
glm(use ~ wind, data = shuttle, family = "binomial")
a <- glm(use ~ wind, data = shuttle, family = "binomial")
exp(a$coef)
a <- glm(use ~ wind + magn, data = shuttle, family = "binomial")
exp(a$coef)
b <- glm(1 - use ~ wind + magn, data = shuttle, family = "binomial")
b <- glm(1 - as.numeric(use) ~ wind + magn, data = shuttle, family = "binomial")
b <- glm(use+1 ~ wind + magn, data = shuttle, family = "binomial")
b <- glm(use+1 ~ wind + magn, data = shuttle, family = "binomial")
str(InsectSprays)
c <- glm(count ~ spray, data = InsectSprays, family = "poisson")
c
exp(c$coef)
exp(c$coef[1])/exp(c$coef[2])
c <- glm(count ~ spray - 1, data = InsectSprays, family = "poisson")
summary(c)$coef
exp(c$coef[1])/exp(c$coef[2])
c <- glm(count ~ spray, data = InsectSprays, family = "poisson")
summary(c)$coef
c <- glm(count ~ spray + offest(10), data = InsectSprays, family = "poisson")
c <- glm(count ~ spray + offset(10), data = InsectSprays, family = "poisson")
c <- glm(count ~ spray, offset = log(10), data = InsectSprays, family = "poisson")
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x
knot = 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
knot <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
1/1001
1/1001
1/1000
.001*100
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train(training$diagnosis ~ training[,58:69], data=training)
head(training[,58:69])
labels(training)
modelFit <- train(training$diagnosis ~ training[,58:69], data=training)
data1 <- (training[,58:69])
modelFit <- train(training$diagnosis ~ ., data=data1)
modelFit <- train(training$diagnosis ~ ., method = "glm", data=data1)
modelFit <- train(training$diagnosis ~ ., method = "glm", preprocess = "pca", data=data1)
modelFit <- train(training$diagnosis ~ ., data=data1)
modelFit <- train(training$diagnosis ~ ., method = "glm", preprocess = "pca", data=data1)
?train
modelFit <- train(training$diagnosis, method = "glm", preprocess = "pca", data=data1)
modelFit <- train(training$diagnosis, data1, method = "glm", preprocess = "pca")
modelFit <- train(training$diagnosis, training[,58:69], method = "glm", preprocess = "pca")
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
install.packages("e1071")
library(e1071)
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
hist(numeric(training$SuperPlasticizer)
)
hist(numeric(training$SuperPlasticizer))
head(training$SuperPlasticizer)
head(training)
setwd("D:/coursera/Reproducable Research/assignment 1")
